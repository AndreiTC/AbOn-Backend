// <auto-generated />
using System;
using Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Context.Migrations
{
    [DbContext(typeof(AbOnContext))]
    partial class AbOnContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview1-35029")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.TaskAggregate.AbTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .IsUnicode(false);

                    b.Property<int?>("DifficultyId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("TaskDetailsId");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("TaskDetailsId");

                    b.ToTable("AbTask");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.Delay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Solution")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TaskDetailsId");

                    b.Property<string>("Time")
                        .HasColumnName("Time");

                    b.HasKey("Id");

                    b.HasIndex("TaskDetailsId");

                    b.ToTable("Delay");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.Difficulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Difficulty");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("TaskDetailsId");

                    b.HasKey("Id");

                    b.HasIndex("TaskDetailsId");

                    b.ToTable("Step");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.TaskDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Goal")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TimeFrame")
                        .HasColumnName("TimeFrame");

                    b.HasKey("Id");

                    b.ToTable("TaskDetails");
                });

            modelBuilder.Entity("Entities.Models.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountType");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("HashPassword");

                    b.Property<byte[]>("Salt");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.AbTask", b =>
                {
                    b.HasOne("Entities.Models.TaskAggregate.Difficulty", "Difficulty")
                        .WithMany()
                        .HasForeignKey("DifficultyId");

                    b.HasOne("Entities.Models.TaskAggregate.TaskDetails", "TaskDetails")
                        .WithMany()
                        .HasForeignKey("TaskDetailsId");
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.Delay", b =>
                {
                    b.HasOne("Entities.Models.TaskAggregate.TaskDetails")
                        .WithMany("Delays")
                        .HasForeignKey("TaskDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.TaskAggregate.Step", b =>
                {
                    b.HasOne("Entities.Models.TaskAggregate.TaskDetails")
                        .WithMany("Steps")
                        .HasForeignKey("TaskDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
